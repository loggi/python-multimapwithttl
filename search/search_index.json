{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"MultiMapWithTTL \u00b6 An implementation of multimap with per-item expiration backed up by Redis. Documentation: https://loggi.github.io/python-multimapwithttl GitHub: https://github.com/loggi/python-multimapwithttl PyPI: https://pypi.org/project/python-multimapwithttl/ Free software: MIT Description \u00b6 This lib is based on: https://quickleft.com/blog/how-to-create-and-expire-list-items-in-redis/ without the need for an extra job to delete old items. Values are internally stored on Redis using Sorted Sets : key1: { (score1, value1), (score2, value2), ... } key2: { (score3, value3), (score4, value4), ... } ... Where the score is the timestamp when the value was added. We use the timestamp to filter expired values and when an insertion happens, we opportunistically garbage collect expired values. The key itself is set to expire through redis ttl mechanism together with the newest value. These operations result in a simulated multimap with item expiration. You can use to keep track of values associated to keys, when the value has a notion of expiration. >>> s = MultiMapWithTTL(redis_client, 'multimap') >>> s.add('a', 1, 2, 3) >>> sorted(s.get('a')) [1, 2, 3] >>> s.add_many([('b', (4, 5, 6)), ('c', (7, 8, 9)), ]) >>> sorted(sorted(values) for values in s.get_many('a', 'b', 'c'))) [[1, 2, 3], [4, 5, 6], [7, 8, 9]]","title":"Home"},{"location":"#multimapwithttl","text":"An implementation of multimap with per-item expiration backed up by Redis. Documentation: https://loggi.github.io/python-multimapwithttl GitHub: https://github.com/loggi/python-multimapwithttl PyPI: https://pypi.org/project/python-multimapwithttl/ Free software: MIT","title":"MultiMapWithTTL"},{"location":"#description","text":"This lib is based on: https://quickleft.com/blog/how-to-create-and-expire-list-items-in-redis/ without the need for an extra job to delete old items. Values are internally stored on Redis using Sorted Sets : key1: { (score1, value1), (score2, value2), ... } key2: { (score3, value3), (score4, value4), ... } ... Where the score is the timestamp when the value was added. We use the timestamp to filter expired values and when an insertion happens, we opportunistically garbage collect expired values. The key itself is set to expire through redis ttl mechanism together with the newest value. These operations result in a simulated multimap with item expiration. You can use to keep track of values associated to keys, when the value has a notion of expiration. >>> s = MultiMapWithTTL(redis_client, 'multimap') >>> s.add('a', 1, 2, 3) >>> sorted(s.get('a')) [1, 2, 3] >>> s.add_many([('b', (4, 5, 6)), ('c', (7, 8, 9)), ]) >>> sorted(sorted(values) for values in s.get_many('a', 'b', 'c'))) [[1, 2, 3], [4, 5, 6], [7, 8, 9]]","title":"Description"},{"location":"api/","text":"Top-level package for MultiMapWithTTL. multimapwithttl \u00b6 An implementation of multimap with per-item expiration backed up by Redis. MultiMapWithTTL \u00b6 An implementation of multimap with per-item expiration backed up by Redis. It was based on: https://quickleft.com/blog/how-to-create-and-expire-list-items-in-redis/ without the need for an extra job to delete old items. Values are internally stored on Redis using Sorted Sets : key1: { (score1, value1), (score2, value2), ... } key2: { (score3, value3), (score4, value4), ... } ... Where the score is the timestamp when the value was added. We use the timestamp to filter expired values and when an insertion happens, we opportunistically garbage collect expired values. The key itself is set to expire through redis ttl mechanism together with the newest value. These operations result in a simulated multimap with item expiration. You can use to keep track of values associated to keys, when the value has a notion of expiration. >>> s = MultiMapWithTTL('multimap') >>> s.add('a', 1, 2, 3) >>> sorted(s.get('a')) [1, 2, 3] >>> s.add_many([('b', (4, 5, 6)), ('c', (7, 8, 9)), ]) >>> sorted(sorted(values) for values in s.get_many('a', 'b', 'c'))) [[1, 2, 3], [4, 5, 6], [7, 8, 9]] __init__ ( self , redis_client , key_prefix , ttl = 3600 , cast_fn = None ) special \u00b6 Initialize the instance. Parameters: Name Type Description Default redis_client A redis-py.StrictRedis client instance. required key_prefix str A prefix to generate Redis keys. required ttl int Set a timeout, in seconds, of when old values should be removed. After the timeout has expired without adding new items to a key, the key itself will be automatically deleted. Defaults to 60 min. 3600 cast_fn Callable[[Any], Any] Cast the returned values from Redis to a desired type, defaults to int None Source code in multimapwithttl/multimapwithttl.py def __init__ ( self , redis_client , key_prefix : str , ttl : int = 3600 , cast_fn : Callable [[ Any ], Any ] = None ): \"\"\" Initialize the instance. Args: redis_client: A redis-py.StrictRedis client instance. key_prefix (str): A prefix to generate Redis keys. ttl (int): Set a timeout, in seconds, of when old values should be removed. After the timeout has expired without adding new items to a key, the key itself will be automatically deleted. Defaults to 60 min. cast_fn (Callable[[str], T]): Cast the returned values from Redis to a desired type, defaults to `int` \"\"\" self . key_prefix = key_prefix self . ttl = ttl self . cast_fn = cast_fn if cast_fn is not None else lambda x : int ( x ) self . redis = redis_client # From redis-py 3.x, the zadd method changed from accepting (*args) to a (mapping) self . old_redis = 'mapping' not in inspect . signature ( redis_client . zadd ) . parameters . keys () add ( self , name , * values ) \u00b6 Insert *values at the name key. Parameters: Name Type Description Default name str The key name where values should be stored. required *values Iterable[Any] A list of values to be stored at name . () Returns: Type Description None None Source code in multimapwithttl/multimapwithttl.py def add ( self , name : str , * values : Iterable [ Any ]) -> None : \"\"\" Insert `*values` at the `name` key. Args: name (str): The key name where `values` should be stored. *values: A list of values to be stored at `name`. Returns: None \"\"\" self . add_many ((( name , values ),)) add_many ( self , data ) \u00b6 Bulk insert data. Parameters: Name Type Description Default data An iterator of (key, values) pairs. required Example MultiMapWithTTL(redis_client, 'expiringset').add_many([ ('a', (1, 2, 3)), ('b', (4, 5, 6)), ('c', (7, 8, 9)), ]) required Returns: Type Description None Source code in multimapwithttl/multimapwithttl.py def add_many ( self , data ): # type: (Iterable[Tuple[str, Iterable[Any]]]) -> None \"\"\" Bulk insert data. Args: data: An iterator of (key, values) pairs. Example: MultiMapWithTTL(redis_client, 'expiringset').add_many([ ('a', (1, 2, 3)), ('b', (4, 5, 6)), ('c', (7, 8, 9)), ]) Returns: None \"\"\" scores = self . _get_score_iter () self . add_many_with_ttl (( name , zip ( scores , values )) for name , values in data ) add_many_with_ttl ( self , data ) \u00b6 Bulk insert data. Parameters: Name Type Description Default data An iterator of (key, (values/ttls)) pairs. required As this MultiMapWithTTL(redis_client, 'expiringset').add_many_with_ttl([ ('a', ((value1, score1), (value2, score2), (value3, score3))), ('b', ((value4, score4), (value5, score5), (value6, score6))), ]) required Example MultiMapWithTTL(redis_client, 'expiringset').add_many_with_ttl([ ('a', ((1, 159165312), (2, 159165312), (3, 159165312))), ('b', ((4, 159165312), (5, 159165312), (6, 159165312))), ('c', ((7, 159165312), (8, 159165312), (9, 159165312))), ]) required Returns: Type Description None Source code in multimapwithttl/multimapwithttl.py def add_many_with_ttl ( self , data ): # type: (Iterable[Tuple[str,Iterable[Tuple[Any, int]]]]) -> None # noqa \"\"\" Bulk insert data. Args: data: An iterator of (key, (values/ttls)) pairs. The ttl is the expected timestamp when the value should expire. As this: MultiMapWithTTL(redis_client, 'expiringset').add_many_with_ttl([ ('a', ((value1, score1), (value2, score2), (value3, score3))), ('b', ((value4, score4), (value5, score5), (value6, score6))), ]) Example: MultiMapWithTTL(redis_client, 'expiringset').add_many_with_ttl([ ('a', ((1, 159165312), (2, 159165312), (3, 159165312))), ('b', ((4, 159165312), (5, 159165312), (6, 159165312))), ('c', ((7, 159165312), (8, 159165312), (9, 159165312))), ]) Returns: None \"\"\" # The operations in the pipeline were ordered carefully such that failure # of the subsequent operations do not leave the data structure in an inconsistent state. # Thanks to that, we do not need to use a transaction or # wait calls, making the code efficient and robust. pipeline = self . redis . pipeline ( transaction = False ) current_score = self . _get_current_score () for name , values in data : key = self . _get_key ( name ) # expireat api requires a half open interval pipeline . expireat ( key , self . _get_ttl_score () + 1 ) # We may don't have values to add, # but we still want to execute the other steps on pipeline. if self . old_redis : # we're building a generator as expected by `.zadd(*args)`, # in the form of: score1, name1, score2, name2, ... params = [ item for pair in values for item in pair ] if params : pipeline . zadd ( key , * params ) else : mapping = { name : score for score , name in values } if mapping : pipeline . zadd ( key , mapping = mapping ) # note zremrangebyscore is inclusive pipeline . zremrangebyscore ( key , 0 , current_score ) pipeline . execute () delete ( self , * names ) \u00b6 Delete *names from the multimap. Source code in multimapwithttl/multimapwithttl.py def delete ( self , * names ) -> None : \"\"\"Delete `*names` from the multimap.\"\"\" keys = ( self . _get_key ( name ) for name in names ) self . redis . delete ( * keys ) get ( self , name ) \u00b6 Return a generator of all values stored at name that are not expired. Source code in multimapwithttl/multimapwithttl.py def get ( self , name ): # type: (str) -> Generator[T, None, None] \"\"\"Return a generator of all values stored at `name` that are not expired.\"\"\" return next ( self . get_many ( name )) get_many ( self , * names ) \u00b6 Return a generator of generators of all values stored at *names that are not expired. Parameters: Name Type Description Default *names Name of the keys being queried. () Returns: Type Description Generator[Generator[~T, NoneType, NoneType], NoneType, NoneType] Generator[T] Source code in multimapwithttl/multimapwithttl.py def get_many ( self , * names ) -> Generator [ Generator [ T , None , None ], None , None ]: \"\"\" Return a generator of generators of all values stored at `*names` that are not expired. Args: *names: Name of the keys being queried. Returns: Generator[T] \"\"\" pipeline = self . redis . pipeline ( transaction = False ) current_score = self . _get_current_score () + 1 keys = ( self . _get_key ( name ) for name in names ) for key in keys : # zrangebyscore inclusive range pipeline . zrangebyscore ( key , current_score , \"+inf\" ) return (( self . cast_fn ( x ) for x in results ) for results in pipeline . execute ())","title":"Modules"},{"location":"api/#multimapwithttl.multimapwithttl","text":"An implementation of multimap with per-item expiration backed up by Redis.","title":"multimapwithttl"},{"location":"api/#multimapwithttl.multimapwithttl.MultiMapWithTTL","text":"An implementation of multimap with per-item expiration backed up by Redis. It was based on: https://quickleft.com/blog/how-to-create-and-expire-list-items-in-redis/ without the need for an extra job to delete old items. Values are internally stored on Redis using Sorted Sets : key1: { (score1, value1), (score2, value2), ... } key2: { (score3, value3), (score4, value4), ... } ... Where the score is the timestamp when the value was added. We use the timestamp to filter expired values and when an insertion happens, we opportunistically garbage collect expired values. The key itself is set to expire through redis ttl mechanism together with the newest value. These operations result in a simulated multimap with item expiration. You can use to keep track of values associated to keys, when the value has a notion of expiration. >>> s = MultiMapWithTTL('multimap') >>> s.add('a', 1, 2, 3) >>> sorted(s.get('a')) [1, 2, 3] >>> s.add_many([('b', (4, 5, 6)), ('c', (7, 8, 9)), ]) >>> sorted(sorted(values) for values in s.get_many('a', 'b', 'c'))) [[1, 2, 3], [4, 5, 6], [7, 8, 9]]","title":"MultiMapWithTTL"},{"location":"api/#multimapwithttl.multimapwithttl.MultiMapWithTTL.__init__","text":"Initialize the instance. Parameters: Name Type Description Default redis_client A redis-py.StrictRedis client instance. required key_prefix str A prefix to generate Redis keys. required ttl int Set a timeout, in seconds, of when old values should be removed. After the timeout has expired without adding new items to a key, the key itself will be automatically deleted. Defaults to 60 min. 3600 cast_fn Callable[[Any], Any] Cast the returned values from Redis to a desired type, defaults to int None Source code in multimapwithttl/multimapwithttl.py def __init__ ( self , redis_client , key_prefix : str , ttl : int = 3600 , cast_fn : Callable [[ Any ], Any ] = None ): \"\"\" Initialize the instance. Args: redis_client: A redis-py.StrictRedis client instance. key_prefix (str): A prefix to generate Redis keys. ttl (int): Set a timeout, in seconds, of when old values should be removed. After the timeout has expired without adding new items to a key, the key itself will be automatically deleted. Defaults to 60 min. cast_fn (Callable[[str], T]): Cast the returned values from Redis to a desired type, defaults to `int` \"\"\" self . key_prefix = key_prefix self . ttl = ttl self . cast_fn = cast_fn if cast_fn is not None else lambda x : int ( x ) self . redis = redis_client # From redis-py 3.x, the zadd method changed from accepting (*args) to a (mapping) self . old_redis = 'mapping' not in inspect . signature ( redis_client . zadd ) . parameters . keys ()","title":"__init__()"},{"location":"api/#multimapwithttl.multimapwithttl.MultiMapWithTTL.add","text":"Insert *values at the name key. Parameters: Name Type Description Default name str The key name where values should be stored. required *values Iterable[Any] A list of values to be stored at name . () Returns: Type Description None None Source code in multimapwithttl/multimapwithttl.py def add ( self , name : str , * values : Iterable [ Any ]) -> None : \"\"\" Insert `*values` at the `name` key. Args: name (str): The key name where `values` should be stored. *values: A list of values to be stored at `name`. Returns: None \"\"\" self . add_many ((( name , values ),))","title":"add()"},{"location":"api/#multimapwithttl.multimapwithttl.MultiMapWithTTL.add_many","text":"Bulk insert data. Parameters: Name Type Description Default data An iterator of (key, values) pairs. required Example MultiMapWithTTL(redis_client, 'expiringset').add_many([ ('a', (1, 2, 3)), ('b', (4, 5, 6)), ('c', (7, 8, 9)), ]) required Returns: Type Description None Source code in multimapwithttl/multimapwithttl.py def add_many ( self , data ): # type: (Iterable[Tuple[str, Iterable[Any]]]) -> None \"\"\" Bulk insert data. Args: data: An iterator of (key, values) pairs. Example: MultiMapWithTTL(redis_client, 'expiringset').add_many([ ('a', (1, 2, 3)), ('b', (4, 5, 6)), ('c', (7, 8, 9)), ]) Returns: None \"\"\" scores = self . _get_score_iter () self . add_many_with_ttl (( name , zip ( scores , values )) for name , values in data )","title":"add_many()"},{"location":"api/#multimapwithttl.multimapwithttl.MultiMapWithTTL.add_many_with_ttl","text":"Bulk insert data. Parameters: Name Type Description Default data An iterator of (key, (values/ttls)) pairs. required As this MultiMapWithTTL(redis_client, 'expiringset').add_many_with_ttl([ ('a', ((value1, score1), (value2, score2), (value3, score3))), ('b', ((value4, score4), (value5, score5), (value6, score6))), ]) required Example MultiMapWithTTL(redis_client, 'expiringset').add_many_with_ttl([ ('a', ((1, 159165312), (2, 159165312), (3, 159165312))), ('b', ((4, 159165312), (5, 159165312), (6, 159165312))), ('c', ((7, 159165312), (8, 159165312), (9, 159165312))), ]) required Returns: Type Description None Source code in multimapwithttl/multimapwithttl.py def add_many_with_ttl ( self , data ): # type: (Iterable[Tuple[str,Iterable[Tuple[Any, int]]]]) -> None # noqa \"\"\" Bulk insert data. Args: data: An iterator of (key, (values/ttls)) pairs. The ttl is the expected timestamp when the value should expire. As this: MultiMapWithTTL(redis_client, 'expiringset').add_many_with_ttl([ ('a', ((value1, score1), (value2, score2), (value3, score3))), ('b', ((value4, score4), (value5, score5), (value6, score6))), ]) Example: MultiMapWithTTL(redis_client, 'expiringset').add_many_with_ttl([ ('a', ((1, 159165312), (2, 159165312), (3, 159165312))), ('b', ((4, 159165312), (5, 159165312), (6, 159165312))), ('c', ((7, 159165312), (8, 159165312), (9, 159165312))), ]) Returns: None \"\"\" # The operations in the pipeline were ordered carefully such that failure # of the subsequent operations do not leave the data structure in an inconsistent state. # Thanks to that, we do not need to use a transaction or # wait calls, making the code efficient and robust. pipeline = self . redis . pipeline ( transaction = False ) current_score = self . _get_current_score () for name , values in data : key = self . _get_key ( name ) # expireat api requires a half open interval pipeline . expireat ( key , self . _get_ttl_score () + 1 ) # We may don't have values to add, # but we still want to execute the other steps on pipeline. if self . old_redis : # we're building a generator as expected by `.zadd(*args)`, # in the form of: score1, name1, score2, name2, ... params = [ item for pair in values for item in pair ] if params : pipeline . zadd ( key , * params ) else : mapping = { name : score for score , name in values } if mapping : pipeline . zadd ( key , mapping = mapping ) # note zremrangebyscore is inclusive pipeline . zremrangebyscore ( key , 0 , current_score ) pipeline . execute ()","title":"add_many_with_ttl()"},{"location":"api/#multimapwithttl.multimapwithttl.MultiMapWithTTL.delete","text":"Delete *names from the multimap. Source code in multimapwithttl/multimapwithttl.py def delete ( self , * names ) -> None : \"\"\"Delete `*names` from the multimap.\"\"\" keys = ( self . _get_key ( name ) for name in names ) self . redis . delete ( * keys )","title":"delete()"},{"location":"api/#multimapwithttl.multimapwithttl.MultiMapWithTTL.get","text":"Return a generator of all values stored at name that are not expired. Source code in multimapwithttl/multimapwithttl.py def get ( self , name ): # type: (str) -> Generator[T, None, None] \"\"\"Return a generator of all values stored at `name` that are not expired.\"\"\" return next ( self . get_many ( name ))","title":"get()"},{"location":"api/#multimapwithttl.multimapwithttl.MultiMapWithTTL.get_many","text":"Return a generator of generators of all values stored at *names that are not expired. Parameters: Name Type Description Default *names Name of the keys being queried. () Returns: Type Description Generator[Generator[~T, NoneType, NoneType], NoneType, NoneType] Generator[T] Source code in multimapwithttl/multimapwithttl.py def get_many ( self , * names ) -> Generator [ Generator [ T , None , None ], None , None ]: \"\"\" Return a generator of generators of all values stored at `*names` that are not expired. Args: *names: Name of the keys being queried. Returns: Generator[T] \"\"\" pipeline = self . redis . pipeline ( transaction = False ) current_score = self . _get_current_score () + 1 keys = ( self . _get_key ( name ) for name in names ) for key in keys : # zrangebyscore inclusive range pipeline . zrangebyscore ( key , current_score , \"+inf\" ) return (( self . cast_fn ( x ) for x in results ) for results in pipeline . execute ())","title":"get_many()"},{"location":"changelog/","text":"Changelog \u00b6 0.1.0 (2021-11-11) \u00b6 First release on PyPI. Open sourcing MultiMapWithTTL This package was created with Cookiecutter and the waynerv/cookiecutter-pypackage project template.","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#010-2021-11-11","text":"First release on PyPI. Open sourcing MultiMapWithTTL This package was created with Cookiecutter and the waynerv/cookiecutter-pypackage project template.","title":"0.1.0 (2021-11-11)"},{"location":"contributing/","text":"Contributing \u00b6 Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways: Types of Contributions \u00b6 Report Bugs \u00b6 Report bugs at https://github.com/loggi/python-multimapwithttl/issues. If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug. Fix Bugs \u00b6 Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it. Implement Features \u00b6 Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it. Write Documentation \u00b6 MultiMapWithTTL could always use more documentation, whether as part of the official MultiMapWithTTL docs, in docstrings, or even on the web in blog posts, articles, and such. Submit Feedback \u00b6 The best way to send feedback is to file an issue at https://github.com/loggi/python-multimapwithttl/issues. If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :) Get Started! \u00b6 Ready to contribute? Here's how to set up python-multimapwithttl for local development. Fork the python-multimapwithttl repo on GitHub. Clone your fork locally $ git clone git@github.com:your_name_here/python-multimapwithttl.git Ensure poetry is installed. Install dependencies and start your virtualenv: $ poetry install -E test -E doc -E dev Create a branch for local development: $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass the tests, including testing other Python versions, with tox: $ poetry run tox Commit your changes and push your branch to GitHub: $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website. Pull Request Guidelines \u00b6 Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request should work for Python 3.6, 3.7, 3.8 and 3.9. Check https://github.com/loggi/python-multimapwithttl/actions and make sure that the tests pass for all supported Python versions. Tips \u00b6 $ poetry run pytest tests/test_multimapwithttl.py To run a subset of tests. Deploying \u00b6 A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in CHANGELOG.md). Then run: $ poetry run bump2version patch # possible: major / minor / patch $ git push $ git push --tags GitHub Actions will then deploy to PyPI if tests pass.","title":"Contributing"},{"location":"contributing/#contributing","text":"Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways:","title":"Contributing"},{"location":"contributing/#types-of-contributions","text":"","title":"Types of Contributions"},{"location":"contributing/#report-bugs","text":"Report bugs at https://github.com/loggi/python-multimapwithttl/issues. If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug.","title":"Report Bugs"},{"location":"contributing/#fix-bugs","text":"Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it.","title":"Fix Bugs"},{"location":"contributing/#implement-features","text":"Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it.","title":"Implement Features"},{"location":"contributing/#write-documentation","text":"MultiMapWithTTL could always use more documentation, whether as part of the official MultiMapWithTTL docs, in docstrings, or even on the web in blog posts, articles, and such.","title":"Write Documentation"},{"location":"contributing/#submit-feedback","text":"The best way to send feedback is to file an issue at https://github.com/loggi/python-multimapwithttl/issues. If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :)","title":"Submit Feedback"},{"location":"contributing/#get-started","text":"Ready to contribute? Here's how to set up python-multimapwithttl for local development. Fork the python-multimapwithttl repo on GitHub. Clone your fork locally $ git clone git@github.com:your_name_here/python-multimapwithttl.git Ensure poetry is installed. Install dependencies and start your virtualenv: $ poetry install -E test -E doc -E dev Create a branch for local development: $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass the tests, including testing other Python versions, with tox: $ poetry run tox Commit your changes and push your branch to GitHub: $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website.","title":"Get Started!"},{"location":"contributing/#pull-request-guidelines","text":"Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request should work for Python 3.6, 3.7, 3.8 and 3.9. Check https://github.com/loggi/python-multimapwithttl/actions and make sure that the tests pass for all supported Python versions.","title":"Pull Request Guidelines"},{"location":"contributing/#tips","text":"$ poetry run pytest tests/test_multimapwithttl.py To run a subset of tests.","title":"Tips"},{"location":"contributing/#deploying","text":"A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in CHANGELOG.md). Then run: $ poetry run bump2version patch # possible: major / minor / patch $ git push $ git push --tags GitHub Actions will then deploy to PyPI if tests pass.","title":"Deploying"},{"location":"installation/","text":"Installation \u00b6 Stable release \u00b6 To install MultiMapWithTTL, run this command in your terminal: $ pip install python-multimapwithttl This is the preferred method to install MultiMapWithTTL, as it will always install the most recent stable release. If you don't have pip installed, this Python installation guide can guide you through the process. From source \u00b6 The source for MultiMapWithTTL can be downloaded from the Github repo . You can either clone the public repository: $ git clone git://github.com/loggi/python-multimapwithttl Or download the tarball : $ curl -OJL https://github.com/loggi/python-multimapwithttl/tarball/master Once you have a copy of the source, you can install it with: $ pip install .","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#stable-release","text":"To install MultiMapWithTTL, run this command in your terminal: $ pip install python-multimapwithttl This is the preferred method to install MultiMapWithTTL, as it will always install the most recent stable release. If you don't have pip installed, this Python installation guide can guide you through the process.","title":"Stable release"},{"location":"installation/#from-source","text":"The source for MultiMapWithTTL can be downloaded from the Github repo . You can either clone the public repository: $ git clone git://github.com/loggi/python-multimapwithttl Or download the tarball : $ curl -OJL https://github.com/loggi/python-multimapwithttl/tarball/master Once you have a copy of the source, you can install it with: $ pip install .","title":"From source"},{"location":"usage/","text":"Usage \u00b6 To use MultiMapWithTTL in a project, first: from multimapwithttl import MultiMapWithTTL You can use to keep track of values associated to keys, when the value has a notion of expiration. >>> s = MultiMapWithTTL(redis_client, 'multimap') >>> s.add('a', 1, 2, 3) >>> sorted(s.get('a')) [1, 2, 3] >>> s.add_many([('b', (4, 5, 6)), ('c', (7, 8, 9)), ]) >>> sorted(sorted(values) for values in s.get_many('a', 'b', 'c'))) [[1, 2, 3], [4, 5, 6], [7, 8, 9]]","title":"Usage"},{"location":"usage/#usage","text":"To use MultiMapWithTTL in a project, first: from multimapwithttl import MultiMapWithTTL You can use to keep track of values associated to keys, when the value has a notion of expiration. >>> s = MultiMapWithTTL(redis_client, 'multimap') >>> s.add('a', 1, 2, 3) >>> sorted(s.get('a')) [1, 2, 3] >>> s.add_many([('b', (4, 5, 6)), ('c', (7, 8, 9)), ]) >>> sorted(sorted(values) for values in s.get_many('a', 'b', 'c'))) [[1, 2, 3], [4, 5, 6], [7, 8, 9]]","title":"Usage"}]}